<?php

namespace Drupal\pfe_med_connect\Plugin\ContactForm;

use Drupal\Component\Utility\EmailValidatorInterface;
use Drupal\Core\Contact\ContactFormInterface;
use Drupal\Core\Contact\ContactMessageInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Mail\MailManagerInterface;
use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
use Drupal\Core\Plugin\PluginBase;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Drupal\Core\Database\Connection;

/**
 * Provides a contact form handler that sends emails based on custom logic.
 *
 * @ContactFormHandler(
 *   id = "pfe_med_connect_contact_handler",
 *   label = @Translation("Custom Contact Form Handler"),
 *   category = @Translation("Custom"),
 *   deriver = "Drupal\pfe_med_connect\Plugin\Derivative\PfeMedConnectContactFormHandler",
 * )
 */
class PfeMedConnectContactFormHandler extends PluginBase implements ContactFormHandlerInterface, ContainerFactoryPluginInterface {

  /**
   * The mail manager service.
   *
   * @var \Drupal\Core\Mail\MailManagerInterface
   */
  protected $mailManager;

  /**
   * The email validator service.
   *
   * @var \Drupal\Component\Utility\EmailValidatorInterface
   */
  protected $emailValidator;

  /**
   * The database connection service.
   *
   * @var \Drupal\Core\Database\Connection
   */
  protected $database;

  /**
   * Constructs a new PfeMedConnectContactFormHandler object.
   *
   * @param array $configuration
   *   The plugin configuration.
   * @param string $plugin_id
   *   The plugin ID.
   * @param mixed $plugin_definition
   *   The plugin definition.
   * @param \Drupal\Core\Mail\MailManagerInterface $mail_manager
   *   The mail manager service.
   * @param \Drupal\Component\Utility\EmailValidatorInterface $email_validator
   *   The email validator service.
   * @param \Drupal\Core\Database\Connection $database
   *   The database connection service.
   */
  public function __construct(array $configuration, $plugin_id, $plugin_definition, MailManagerInterface $mail_manager, EmailValidatorInterface $email_validator, Connection $database) {
    parent::__construct($configuration, $plugin_id, $plugin_definition);
    $this->mailManager = $mail_manager;
    $this->emailValidator = $email_validator;
    $this->database = $database;
  }

  /**
   * {@inheritdoc}
   */
  public static function create(ContainerInterface $container, array $configuration, $plugin_id, $plugin_definition) {
    return new static(
      $configuration,
      $plugin_id,
      $plugin_definition,
      $container->get('plugin.manager.mail'),
      $container->get('email.validator'),
      $container->get('database')
    );
  }

  /**
   * {@inheritdoc}
   */
  public function defaultConfiguration() {
    return [];
  }

  /**
   * {@inheritdoc}
   */
  public function buildConfigurationForm(array $form, FormStateInterface $form_state) {
    return $form;
  }

  /**
   * {@inheritdoc}
   */
  public function validateConfigurationForm(array &$form, FormStateInterface $form_state) {
  }

  /**
   * {@inheritdoc}
   */
  public function submitConfigurationForm(array &$form, FormStateInterface $form_state) {
  }

  /**
   * {@inheritdoc}
   */
  public function handleFormSubmission(ContactFormInterface $contact_form, ContactMessageInterface $contact_message, FormStateInterface $form_state) {
    $values = $form_state->getValues();

    // Get the values from the contact form.
    $produit = $values['produit'];
    $aireTherapeutique = $values['aire_therapeutique'];
    $department = $values['department'];

    // Query the custom_table to get the emails.
    $emails = $this->getEmailsFromCustomTable($produit, $aireTherapeutique, $department);

    // Send emails based on the retrieved data.
    $this->sendEmails($emails, $contact_message);
  }

  /**
   * Retrieves the emails from the custom_table based on the form values.
   *
   * @param string $produit
   *   The produit value from the form.
   * @param string $aireTherapeutique
   *   The aire therapeutique value from the form.
   * @param string $department
   *   The department value from the form.
   *
   * @return array
   *   An array containing the email addresses.
   */
  protected function getEmailsFromCustomTable($produit, $aireTherapeutique, $department) {
    $emails = [];

    // Query the custom_table to retrieve the emails based on the form values.
    $query = $this->database->select('custom_table', 'ct');
    $query->fields('ct', ['RMR_adresse_email', 'Backup_adresse_email']);
    $query->condition('ct.Produit', $produit);
    $query->condition('ct.Aire_therapeutique', $aireTherapeutique);
    if (!empty($department)) {
      $query->condition('ct.Departement', $department);
    }
    $result = $query->execute();

    foreach ($result as $row) {
      if (!empty($row->RMR_adresse_email) && $this->emailValidator->isValid($row->RMR_adresse_email)) {
        $emails[] = $row->RMR_adresse_email;
      }
      if (!empty($row->Backup_adresse_email) && $this->emailValidator->isValid($row->Backup_adresse_email)) {
        $emails[] = $row->Backup_adresse_email;
      }
    }

    return $emails;
  }

  /**
   * Sends emails to the specified addresses.
   *
   * @param array $emails
   *   An array of email addresses.
   * @param \Drupal\Core\Contact\ContactMessageInterface $contact_message
   *   The contact message object.
   */
  protected function sendEmails(array $emails, ContactMessageInterface $contact_message) {
    if (!empty($emails)) {
      $params['message'] = $contact_message;
      $params['subject'] = $contact_message->getSubject();
      $params['from'] = $contact_message->get('mail');
      $params['reply-to'] = $contact_message->get('mail');
      $params['headers'] = ['Content-Type' => 'text/html'];

      foreach ($emails as $email) {
        $params['to'] = $email;
        $this->mailManager->mail('contact', 'page_mail', $email, $contact_message->getLanguage()->getId(), $params, NULL, TRUE);
      }
    }
  }

}
