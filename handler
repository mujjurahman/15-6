<?php

namespace Drupal\pfe_med_connect\Plugin\ContactForm;

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Mail\MailManagerInterface;
use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
use Drupal\contact\Plugin\ContactFormInterface;
use Drupal\contact\Plugin\ContactFormBase;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Drupal\pfe_med_connect\PfeMedConnectService;

/**
 * Provides a custom contact form submission handler.
 *
 * @ContactForm(
 *   id = "pfe_med_connect_contact_submission_handler",
 *   label = @Translation("PFE Med Connect Contact Form Submission Handler"),
 *   category = @Translation("Custom"),
 *   default_message = "Thank you for your submission.",
 * )
 */
class ContactSubmissionHandler extends ContactFormBase implements ContainerFactoryPluginInterface {

  /**
   * The PFE Med Connect service.
   *
   * @var \Drupal\pfe_med_connect\PfeMedConnectService
   */
  protected $pfeMedConnectService;

  /**
   * Constructs a new ContactSubmissionHandler instance.
   *
   * @param array $configuration
   *   The plugin configuration.
   * @param string $plugin_id
   *   The plugin ID.
   * @param mixed $plugin_definition
   *   The plugin definition.
   * @param \Drupal\Core\Mail\MailManagerInterface $mailManager
   *   The mail manager.
   * @param \Drupal\pfe_med_connect\PfeMedConnectService $pfeMedConnectService
   *   The PFE Med Connect service.
   */
  public function __construct(array $configuration, $plugin_id, $plugin_definition, MailManagerInterface $mailManager, PfeMedConnectService $pfeMedConnectService) {
    parent::__construct($configuration, $plugin_id, $plugin_definition, $mailManager);
    $this->pfeMedConnectService = $pfeMedConnectService;
  }

  /**
   * {@inheritdoc}
   */
  public static function create(ContainerInterface $container, array $configuration, $plugin_id, $plugin_definition) {
    return new static(
      $configuration,
      $plugin_id,
      $plugin_definition,
      $container->get('plugin.manager.mail'),
      $container->get('pfe_med_connect.service')
    );
  }

  /**
   * {@inheritdoc}
   */
  public function buildForm(array $form, FormStateInterface $form_state) {
    // Build your custom form fields here.
    // Add additional fields as per your requirement.
    // Example:
    $form['additional_field'] = [
      '#type' => 'textfield',
      '#title' => $this->t('Additional Field'),
      '#required' => TRUE,
    ];

    return $form;
  }

  /**
   * {@inheritdoc}
   */
  public function submitForm(array &$form, FormStateInterface $form_state) {
    // Get the values submitted in the form.
    $values = $form_state->getValues();

    // Get the product and therapeutic area values from the form.
    $product = $values['product'];
    $therapeuticArea = $values['therapeutic_area'];

    // Check if the department field is present in the form.
    $department = isset($values['department']) ? $values['department'] : NULL;

    // Query the custom table to get the email addresses.
    $emailAddresses = $this->pfeMedConnectService->getEmailAddresses($product, $therapeuticArea, $department);

    // Check if email addresses are found.
    if (!empty($emailAddresses)) {
      // Send email to RMR adresse email.
      $rmrEmail = $emailAddresses['rmr_email'];
      // Send email to Backup adresse email.
      $backupEmail = $emailAddresses['backup_email'];

      // Build the email message.
      $params = [
        'message' => $values['message'], // Example: Get the submitted message value.
        'additional_field' => $values['additional_field'], // Example: Get the submitted additional field value.
      ];
      $mailParams = [
        'subject' => $this->t('Contact Form Submission'),
        'body' => $this->t('A contact form has been submitted. Message: @message, Additional Field: @additional_field', $params),
      ];

      // Send email to RMR adresse email.
      $this->mailManager->mail(
        'pfe_med_connect',
        'contact_submission',
        $rmrEmail,
        $this->languageManager->getDefaultLanguage()->getId(),
        $mailParams,
        NULL,
        TRUE
      );

      // Send email to Backup adresse email.
      $this->mailManager->mail(
        'pfe_med_connect',
        'contact_submission',
        $backupEmail,
        $this->languageManager->getDefaultLanguage()->getId(),
        $mailParams,
        NULL,
        TRUE
      );
    }
    else {
      // Department is not available, send email to a different recipient.
      $noDepartmentEmail = 'example@example.com'; // Set the email address for sending the email.

      // Build the email message.
      $params = [
        'message' => $values['message'], // Example: Get the submitted message value.
        'additional_field' => $values['additional_field'], // Example: Get the submitted additional field value.
      ];
      $mailParams = [
        'subject' => $this->t('Contact Form Submission (No Department)'),
        'body' => $this->t('A contact form has been submitted without a department. Message: @message, Additional Field: @additional_field', $params),
      ];

      // Send email to the recipient for forms without department.
      $this->mailManager->mail(
        'pfe_med_connect',
        'contact_submission',
        $noDepartmentEmail,
        $this->languageManager->getDefaultLanguage()->getId(),
        $mailParams,
        NULL,
        TRUE
      );
    }
  }

}
